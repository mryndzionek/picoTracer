.template 0
# Library functions

trace.generated_warning_header ?= "\
################################################################################
#  THIS FILE IS 100% GENERATED; DO NOT EDIT EXCEPT EXPERIMENTALLY              #
#  Please refer to the README for information about making permanent changes.  #
################################################################################"

function trace_level_to_value (level)
    if my.level = "ERROR"
        return 1
    elsif my.level = "WARN"
        return 2
    elsif my.level = "INFO"
        return 3
    elsif my.level = "DEBUG"
        return 4
    elsif my.level = "TRACE"
        return 5
    else
        return -1
    endif
endfunction

function verify_format_and_setup ()
    trace.filtering ?= "static"
    trace.crc ?= "default"
    if !(trace.crc = "default")
        if ! defined (trace.crc_size)
            echo "E: CRC size not defined"
            return -1
        elsif !((trace.crc_size = 1) | (trace.crc_size = 2) | (trace.crc_size = 4) | (trace.crc_size = 8))
            echo "E: Wrong CRC size"
            return -1
        endif
    else
        trace.crc_size = 1
    endif
    trace.block_size ?= 64
    if trace.block_size < 2*(7 + trace.crc_size)
        trace.block_size = 2*(7 + trace.crc_size)
    endif
    if !((trace.filtering = "static") | (trace.filtering = "dynamic"))
        echo "E: Wrong filtering value '$(trace.filtering)'. Must be 'static' or 'dynamic'"
        return -1
    endif
    if !(count (root.) = 1)
        echo "E: The main trace XML element is a sigleton"
        return -1
    endif
    if !defined (trace.length)
        echo "E: Logger length not defined"
        return -1
    endif
    if !defined (trace.level)
        trace.level = "INFO"
        echo "I: Setting trace level to $(TRACE.LEVEL)"
    endif
    trace.level_v = trace_level_to_value (trace.level)
    f = file.open (filename)
    trace.prefix = file.basename (f.name)
    trace.path = f.path
    file.close (f)
    if trace.level_v = -1
        echo "E: Wrong trace level $(TRACE.LEVEL)"
        return -1
    endif
    if count (trace.msg) > 255    #0xFF reserved for diadnostic events
        echo "E: Too many messages defined"
        return -1
    endif
    trace.bsize = 0
    for msg
        msg.uid = item () - 1
        _bsize = 0
        if (count (msg.arg) = 0) & !defined (msg.alias)
            trace.has_no_args = trace.has_no_args + 1 ? 1
        endif
        if !defined (msg.id)
            echo "E: The id for message '$(msg.id:no)' not set"
            return -1
        endif
        if count (trace.msg, m.id = msg.id, m) > 1
            echo "E: Duplicate message with id '$(msg.id:no)'"
            return -1
        endif
        if !defined (msg.level)
            echo "E: The trace level for message '$(msg.id:no)' not set"
            return -1
        else
            msg.level_v = trace_level_to_value (msg.level)
            if msg.level_v = -1
                echo "E: Wrong trace level $(msg.LEVEL) at '$(msg.id:no)'"
                return -1
            endif
        endif
        if !defined (msg.format)
            echo "E: The trace format for message '$(msg.id:no)' not set"
            return -1
        endif
        for arg
            if arg.type = "enum"
                c = count (trace.enum, enum.name = arg.name)
                if c = 0
                    echo "E: Missing enum define referenced in message '$(msg.id:no)'"
                    return -1
                elsif c > 1    
                    echo "E: Multiple enums with the same name defined ('$(arg.name)')"
                    return -1
                endif
                for trace.enum where enum.name = arg.name
                    arg.size = enum.size
                    arg.length = count (enum.)
                    enum.used = 1
                endfor
            endif
            if !defined (arg.size)
                echo "E: Missing argument size in message '$(msg.id:no)'"
                return -1
            else
                _bsize = _bsize + arg.size
            endif
            if !defined (arg.name)
                echo "E: Missing argument name in message '$(msg.id:no)'"
                return -1
            endif
            if arg.type = "number" | arg.type = "enum"
                if arg.size < 1 | arg.size > 8
                    echo "E: Wrong argument size in message '$(msg.id:no)'"
                    return -1
                endif
                if arg.size = 3 | arg.size = 5 | arg.size = 6 | arg.size = 7
                    echo "E: Wrong argument size in message '$(msg.id:no)'"
                    return -1
                endif
            else    
                echo "E: Wrong argument type '$(arg.type:no)'"
                return -1
            endif
            if arg.type = "enum"
                c = count (trace.enum, enum.name = arg.name)
                if c = 0
                    echo "E: Missing enum define referenced in message '$(msg.id:no)'"
                    return -1
                endif
            endif
        endfor    
        msg.bsize = _bsize
        trace.bsize = trace.bsize + 7 + trace.crc_size + _bsize
    endfor
    for msg where defined (a.alias) as a
        if a.id = a.alias
            echo "E: Message aliases itself '$(a.id:no)'"
            return -1
        endif
        c = count (trace.msg, msg.id = a.alias)
        if c = 0
            echo "E: Missing alias reference '$(a.id:no) -> $(a.alias:no)'"
            return -1
        else
            for trace.msg as m where m.id = a.alias
                a.bsize = m.bsize
                trace.bsize = trace.bsize + a.bsize
                if defined (m.alias)
                    echo "E: Message cannot alias aliased message '$(a.id:no) -> $(a.alias:no)'"
                    return -1
                else
                    if trace.filtering = "dynamic" | (m.level_v <= trace.level_v)
                        m.is_aliased = 1
                    endif
                endif
            endfor
        endif    
    endfor
    for enum
        if count (trace.enum, e.name = enum.name, e) > 1
            echo "E: Duplicate enum name '$(enum.name:no)'"
            return -1
        endif
    endfor
    return 0
endfunction

function copy_args_to_aliases
    for trace.msg where defined (msg.alias)
        for trace.msg as m where m.id = msg.alias
            for m.arg
                copy arg to msg
            endfor
        endfor
    endfor
endfunction

endtemplate
