.template 0

include "log_lib.gsl"

s = verify_format_and_setup ()
if s = -1
    abort 'E: Code generation failed'
endif

endtemplate
.
.macro gen_c_fn_args (msg)
.   for my.msg.arg
.       if arg.type = "number" | arg.type = "enum"
$(arg.name:no)\
.           if !last (arg)
, \
.           endif
.       endif
.   endfor
.endmacro
.
.macro gen_unused_args (msg)
.   if defined (my.msg.is_aliased)
    (void)uid;
.   endif
.   for my.msg.arg
    (void)$(arg.name);
.   endfor
.endmacro
.
.macro gen_c_fn_params (msg)
.   for my.msg.arg
.       if arg.type = "number" | arg.type = "enum"
uint$(arg.size*8)_t \
$(arg.name:no)\
.           if !last (arg)
, \
.           endif
.       endif
.   endfor
.endmacro
.
.macro gen_c_fn_declr (msg)
.   if defined (my.msg.alias)
void log_$(log.prefix)_$(my.msg.id)(\
.       for log.msg as ma where ma.id = my.msg.alias
.           gen_c_fn_params (ma)
.       endfor
.   elsif defined (my.msg.is_aliased)
void log_$(log.prefix)_$(my.msg.id)(\
.       gen_c_fn_params (my.msg)
.   else
void log_$(log.prefix)_$(my.msg.id)(\
.       gen_c_fn_params (my.msg)
.endif
)\
.endmacro
.
.macro gen_c_fn_alias_declr (msg)
static void _log_$(log.prefix)_$(my.msg.id)_alias(uint8_t uid, \
.   if defined (my.msg.alias)
.       for log.msg as ma where ma.id = my.msg.alias
.           gen_c_fn_params (ma)
.       endfor
.   else
.       gen_c_fn_params (my.msg)
.endif
)\
.endmacro
.
.macro gen_c_fn_body (msg)
.   if log.filtering = "dynamic" | (my.msg.level_v <= log.level_v)
    uint8_t tmp[$(2*(7+my.msg.bsize)+1)], *b = tmp;
    uint32_t ts = GET_TIMESTAMP;
    uint8_t crc;

    ENCODE_NUM_1(b, log_$(log.prefix)_counter);
    log_$(log.prefix)_counter++;
.       if defined (my.msg.is_aliased)
    ENCODE_NUM_1(b, uid);
.       else
    ENCODE_NUM_1(b, $(my.msg.uid));
.       endif
    ENCODE_NUM_4(b, ts);
.       for arg
    ENCODE_NUM_$(arg.size)(b, $(arg.name));
.       endfor
    crc = _log_$(log.prefix)_crc(tmp, b-tmp);
    ENCODE_NUM_1(b, crc);
    *(b++) = END_FLAG;
    (void)rb_write(&_rb, tmp, b-tmp);
.   else
.       gen_unused_args (my.msg)
.   endif
.endmacro
.
.output log.path+"../gen/include/log_$(log.prefix).h"
#ifndef LOG_$(LOG.PREFIX)_H_INCLUDED
#define LOG_$(LOG.PREFIX)_H_INCLUDED

#include <stdint.h>
#include <stddef.h>

.if log.filtering = "dynamic"
typedef enum {
    $(log.PREFIX)_TRACE = 0,
    $(log.PREFIX)_DEBUG,
    $(log.PREFIX)_INFO,
    $(log.PREFIX)_WARN,
    $(log.PREFIX)_ERROR,
} log_$(log.prefix)_level_e;
.endif

.for msg
.   gen_c_fn_declr (msg)
;
.endfor
.if log.filtering = "dynamic"
void log_$(log.prefix)_set_level(log_$(log.prefix)_level_e level);
.endif
size_t log_$(log.prefix)_get(uint8_t *data, size_t bytes);

#endif // LOG_$(LOG.PREFIX)_H_INCLUDED
.
.output log.path+"../gen/src/log_$(log.prefix).c"
#include "log_$(log.prefix).h"

#include "rb.h"
#include "platform.h"

#define END_FLAG           (0x7E)
#define ESCAPE_BYTE        (0x7D)

#define ENCODE_NUM_1(_b, _v) \\
    if (((_v & 0xFF) ^ ESCAPE_BYTE) && ((_v & 0xFF) ^ END_FLAG)) { \\
        *(_b++) = _v; \\
     } else { \\
        *(_b++) = ESCAPE_BYTE; \\
        *(_b++) = _v ^ 0x20; \\
    }

#define ENCODE_NUM_2(_b, _v) \\
    ENCODE_NUM_1(_b, _v); \\
    _v >>= 8; \\
    ENCODE_NUM_1(_b, (_v));

#define ENCODE_NUM_4(_b, _v) \\
    ENCODE_NUM_2(_b, (_v)); \\
    _v >>= 8; \\
    ENCODE_NUM_2(_b, (_v));

#define ENCODE_NUM_8(_b, _v) \\
    ENCODE_NUM_4(_b, (_v)); \\
    _v >>= 8; \\
    ENCODE_NUM_4(_b, (_v));

static rb_t _rb = { .data_ = (uint8_t[$(log.length)]){0}, .capacity_ = $(log.length)};

static uint8_t log_$(log.prefix)_counter;
.if log.filtering = "dynamic"
static log_$(log.prefix)_level_e log_$(log.prefix)_curr_level = $(log.PREFIX)_$(log.LEVEL);
.endif

static uint8_t _log_$(log.prefix)_crc(uint8_t *data, uint8_t len)
{
    uint8_t crc = 0, i;
    uint8_t s = (data[0] == ESCAPE_BYTE) ? 2 : 1;

.if ! defined (log.crc)
    for(i = s; i < len; i++)
    {
        if(data[i] == ESCAPE_BYTE)
        {
            crc += (data[++i] ^ 0x20);
        }
        else    
            crc += data[i];   
    }

    return ~crc;
.else
    return crc_$(log.crc:)(&data[s], len);
.endif    
}

.if log.has_no_args ?> 1
static void _log_$(log.prefix)_no_args(uint8_t uid)
{
    uint8_t tmp[15], *b = tmp;
    uint32_t ts = GET_TIMESTAMP;
    uint8_t crc;
    ENCODE_NUM_1(b, log_$(log.prefix)_counter);
    log_$(log.prefix)_counter++;
    ENCODE_NUM_1(b, uid);
    ENCODE_NUM_4(b, ts);
    crc = _log_$(log.prefix)_crc(tmp, b-tmp);
    ENCODE_NUM_1(b, crc);
    *(b++) = END_FLAG;
    (void)rb_write(&_rb, tmp, b-tmp);
}
.endif

.for msg where defined (msg.is_aliased)
.   gen_c_fn_alias_declr (msg)

{
.   gen_c_fn_body (msg)
}
.endfor

.for msg
.   gen_c_fn_declr (msg)

{
.   if defined (msg.alias)   
    _log_$(log.prefix)_$(msg.alias)_alias($(msg.uid), \
.       for log.msg as ma where ma.id = msg.alias    
.           gen_c_fn_args (ma)
.       endfor
);
.   elsif defined (msg.is_aliased)   
    _log_$(log.prefix)_$(msg.id)_alias($(msg.uid), \
.       gen_c_fn_args (msg)
);
.   elsif (count (msg.arg) = 0)
    _log_$(log.prefix)_no_args($(msg.uid));
.   else
.       gen_c_fn_body (msg)
.   endif
}

.endfor
.if log.filtering = "dynamic"
void log_$(log.prefix)_set_level(log_$(log.prefix)_level_e level)
{
    log_$(log.prefix)_curr_level = level;
}

.endif
size_t log_$(log.prefix)_get(uint8_t *data, size_t bytes)
{
    size_t read = rb_read(&_rb, data, bytes);
    return read;
}
