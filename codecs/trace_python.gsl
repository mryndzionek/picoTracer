.template 0

include "trace_lib.gsl"

s = verify_format_and_setup ()
if s = -1
    abort 'E: Code generation failed'
endif

endtemplate
.
.macro size_to_symbol(size)
.   if my.size = 1
 B \
.   elsif my.size = 2 
 H \
.   elsif my.size = 4
 I \
.   elsif my.size = 8
 Q \
.   endif
.endmacro
.
.macro gen_struct_format (msg)
'= \
.   for my.msg.arg as arg
.       if arg.type = "number" | arg.type = "enum"
.           size_to_symbol(arg.size)
.       endif
.   endfor
'\
.endmacro
.
.macro gen_enum_dict (msg)
.   if count (my.msg.arg, arg.type = "enum", arg) > 0
, { \
.       for my.msg.arg as arg where arg.type = "enum"
$(item (arg) - 1): $(arg.name)_enum\
.           if !last ()
, \
.           endif
.       endfor
 }\
.   endif
.endmacro
.
.copy_args_to_aliases()
.output trace.path+"../gen/python/TraceCfg.py"
$(trace.GENERATED_WARNING_HEADER:)
import sys
import struct
import binascii
import TraceDecoder

class TraceCfg(object):

.for enum
    $(enum.name)_enum = {
.   for entry
        $(entry.key:): '$(entry.value:)',
.   endfor
    };

.endfor
    cfg = {
.for msg
        # Message: $(msg.id:)
        $(msg.uid): TraceDecoder.MsgDecoder('$(msg.LEVEL)', '$(msg.format:)', \
.   gen_struct_format (msg)
.   gen_enum_dict (msg)
),

.endfor

    };

    crc_decoder = struct.Struct('=\
.size_to_symbol (trace.crc_size)
');

